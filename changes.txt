import os
import logging
import pandas as pd
import requests

def delete_all_tokens(auth_token, Bary_web_hash, results, flock_id, hostname_excel=None):
    # Prompt for Deletion Confirmation #1
    confirm = input("‚ö†Ô∏è  Are you sure you want to DELETE TOKENS? (yes/no): ").strip().lower()
    if confirm != "yes":
        print("‚ùå Deletion cancelled.")
        return

    # Prompt for Deletion Confirmation #2
    confirm_final = input("‚ö†Ô∏è  Type 'DELETE' in all caps to confirm: ").strip()
    if confirm_final != "DELETE":
        print("‚ùå Deletion cancelled. 'DELETE' keyword not entered.")
        return

    # Get list of all tokens
    all_tokens = results.get("tokens", [])
    excempt_tokens = {"bki"}  
    flock_id_value = flock_id.split(":")[1]

    # Setup logging
    logging.basicConfig(filename=f'{flock_id_value}_token_delete.log', level=logging.INFO, 
                        format='%(asctime)s - %(levelname)s - %(message)s')

    # If Excel is provided, filter tokens by hostname
    if hostname_excel:
        try:
            df = pd.read_excel(hostname_excel)
            if 'hostname' not in df.columns:
                print("‚ùå Excel file must contain a 'hostname' column.")
                return
            hostnames = set(h.strip().upper() for h in df['hostname'].dropna())
            print(f"üìÑ Filtering by hostnames in file: {len(hostnames)} unique hosts")

            tokens = []
            for item in all_tokens:
                memo = item.get('memo', '')
                parts = memo.split(',')
                if len(parts) >= 1 and parts[0].strip().upper() in hostnames:
                    tokens.append(item)

            print(f"üö® {len(tokens)} tokens matched hostnames and will be deleted.")
        except Exception as e:
            print(f"‚ùå Failed to read Excel file: {e}")
            return
    else:
        tokens = all_tokens
        print(f"üö® {len(tokens)} tokens will be deleted (ALL TOKENS).")

    tkn_num = len(tokens)

    for item in tokens:
        ctoken = item.get('ctoken', '')  
        memo = item.get('memo', '')
        parts = memo.split(',')
        host = parts[0].upper() if len(parts) > 0 else 'UNKNOWN'
        location = parts[2] if len(parts) > 2 else ''
        token_name = os.path.basename(location)
        token_type = item.get('kind', '').lower()

        if token_type in excempt_tokens:
            logging.warning(f"Skipping Exempt Token: '{token_name}' due to its Type: '{token_type}'")
            continue

        logging.info(f"Deleting Token: '{token_name}' for Host: '{host}' from FlockID: {flock_id_value}")

        url = f'https://{Bary_web_hash}.term.tool/api/v1/load/delete'
        payload = {
            'auth_token': auth_token,
            'ctoken': ctoken,
            'clear_bs': 1
        }

        try:
            response = requests.post(url, params=payload, verify=False)
            response.raise_for_status()
            if response.status_code == 200:
                logging.info(f"Successfully Deleted token: {token_name} from FlockID: {flock_id_value}")
                tkn_num -= 1
        except requests.RequestException as e:
            logging.error(f"Failed to Delete {token_name}: {e}")

    if tkn_num == 0:
        print("‚úÖ All specified tokens have been deleted.")
    else:
        print(f"‚ö†Ô∏è {tkn_num} tokens were not able to be deleted.")
