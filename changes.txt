def delete_all_tokens(auth_token, Bary_web_hash, results, flock_id):
  
  # Prompt for Deletion Confirmation #1
  confirm = input("‚ö†Ô∏è  Are you sure you want to DELETE ALL TOKENS? (yes/no): ").strip().lower()
  if confirm != "yes":
    print("‚ùå Deletion cancelled.")
    return
  
  # Prompt for Deletion Confirmation #2
  confirm_final = input("‚ö†Ô∏è  Type 'DELETE' in all caps to confirm: ").strip()
  if confirm_final != "DELETE":
    print("‚ùå Deletion cancelled. 'DELETE' keyword not entered.")
    return
  
  excempt_tokens = {"bki"}  
   
  flock_id_value = flock_id.split(":")[1]

  logging.basicConfig(filename=f'{flock_id_value}_token_delete.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')
  
  tokens = results.get("tokens", [])
  print(f"üö® {len(tokens)} tokens will be deleted.")
  tkn_num = len(tokens)
  
  for item in results['tokens']:
    ctoken = item.get('ctoken', '')  
    memo = item.get('memo', '')
    parts = memo.split(',')
    host = parts[0].upper()  # Standardize hostname to uppercase
    location = parts[2]          # Path from memo
    token_name = os.path.basename(location)  # Extract filename
    token_type = item.get('kind', '').lower()  # Normalize kind to lowercase
    
    logging.info(f"Deleting Token: '{token_name}' for Host: '{host}' from FlockID: {flock_id_value}")
    
    if token_type in excempt_tokens:
      logging.warning(f"Skipping Excempt Token: '{token_name}' due to its Type: '{token_type}' which may have a creation limit")
      continue
    
    url = f'https://{Bary_web_hash}.term.tool/api/v1/load/delete'
    payload = {
            'auth_token': auth_token,
            'ctoken': ctoken,
            'clear_bs': 1
        }
    try:
      response = requests.post(url, params=payload, verify=False)
      response.raise_for_status()  # Raise an error for bad responses (4xx/5xx)
      if response.status_code == 200:
        logging.info(f"Successfully Deleted token: {token_name} from FlockID: {flock_id_value}")
        tkn_num = tkn_num - 1
    except requests.RequestException as e:
                logging.error(f"Failed to Delete {token_name}: {e}")
  if tkn_num == 0:
    print("‚úÖ All tokens have been deleted.")
  else:
    print(f"{(tkn_num)} tokens were not able to be deleted")
